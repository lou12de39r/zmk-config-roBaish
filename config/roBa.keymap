#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "hold-preferred";
    quick-tap-ms = <0>;
    hold-while-undecided;
};

&sl { release-after-ms = <250>; };

&lt { hold-while-undecided; };

/ {
    combos {
        compatible = "zmk,combos";

        BT0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <28 22>;
        };

        BT1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <28 23>;
        };

        BT2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <28 24>;
        };

        BT3 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <28 25>;
        };

        wintab {
            bindings = <&kp LG(TAB)>;
            key-positions = <18 19>;
            layers = <1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            layers = <0>;
        };
    };

    macros {
        to_layer_0: to_layer_0mouse {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0MOUSE";
            wait-ms = <0>;
        };

        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl 4>;

            label = "MKP_EXIT_AML";
        };

        parenthesis: parenthesis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ASTERISK &kp LEFT_PARENTHESIS &kp LEFT_ARROW>;
            label = "parenthesis";
        };

        tolayer0lt: tolayer0 {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&to 0 &macro_param_1to1 &macro_param_2to2 &lt MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
            label = "TOLAYER0";
            wait-ms = <0>;
        };

        tolayer0mt: tolayer0mt {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&to 0 &macro_param_1to1 &macro_param_2to2 &mt MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
            label = "TOLAYER0MT";
            wait-ms = <0>;
        };

        login2: pclogin {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp NUMBER_1 &kp NUMBER_5 &kp NUMBER_0 &kp NUMBER_3 &kp NUMBER_4 &kp NUMBER_5>;
            label = "PCLOGIN";
        };

        login3: loginpw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(W) &kp W &kp H &kp O &kp W &kp A &kp I &kp T &kp O &kp NUMBER_1>;
            label = "LOGINPW";
        };

        login1: login1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(DELETE))>;
            label = "LOGIN1";
        };

        excelkeisen: excelkeisen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp B>;
            label = "EXCELKEISEN";
        };

        mo2: mo2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp AT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo6: mo6 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp CARET>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo7: mo7 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp AMPS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo8: mo8 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp ASTRK>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo9: mo9 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp LPAR>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo0: mo0 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp LS(N9)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moA: moA {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moB: moB {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp PLUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moC: moC {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp INT3>, <&kp LS(0x89)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moD: moD {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp LBRC>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moE: moE {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp RBRC>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moF: moF {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp KP_PLUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moG: moG {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp APOSTROPHE>, <&kp DQT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moH: moH {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSLASH>, <&kp TILDE2>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tolayer0mo: tolayer0mo {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &mo MACRO_PLACEHOLDER>;
            label = "TOLAYER0MO";
            wait-ms = <0>;
        };
    };

    behaviors {
        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        nonesc: nonesc {
            compatible = "zmk,behavior-mod-morph";
            label = "NONESC";
            bindings = <&none>, <&kp ESCAPE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        htnbkr: htnbkr {
            compatible = "zmk,behavior-mod-morph";
            label = "HTNBKR";
            bindings = <&mt LSHFT QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        multi_tap_tab_bspc: behavior_multi_tap {
            label = "MT_TAB_BSPC";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp BSPC>;

            max-taps = <2>;
            max-tap-interrupt-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W               &kp E         &kp R             &kp T                                               &kp Y        &kp U  &lt 5 I    &kp O    &lt 5 P
&kp A             &kp S               &kp D         &kp F             &kp G        &kp ESCAPE              &kp LS(LG(S))  &kp H        &kp J  &kp K      &kp L    &kp MINUS
&mt LEFT_SHIFT Z  &kp X               &kp C         &kp V             &kp B        &kp TAB                 &kp LS(0x87)   &kp N        &kp M  &kp COMMA  &kp DOT  &htnbkr
&kp LCTRL         &mt LEFT_WIN LG(D)  &kp LEFT_ALT  &lt 6 LANG_HANJA  &lt 2 SPACE  &lt 3 LANG_HANGEUL      &kp BACKSPACE  &lt 1 ENTER                             &kp DEL
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        SYMBOLS {
            bindings = <
&trans          &kp CARET        &kp DOUBLE_QUOTES  &kp ASTERISK  &trans                      &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp LEFT_BRACE  &kp LEFT_BRACKET  &trans
&kp 0x89        &kp DOLLAR       &kp PERCENT        &kp EQUAL     &trans  &none       &none   &kp RIGHT_BRACE    &kp PIPE              &kp AMPERSAND   &kp AT            &kp PLUS
&kp LEFT_SHIFT  &kp EXCLAMATION  &kp LEFT_BRACKET   &kp HASH      &trans  &none       &none   &kp RIGHT_BRACKET  &kp BACKSLASH         &kp SEMICOLON   &kp SINGLE_QUOTE  &kp JP_PIPE
&trans          &none            &trans             &trans        &trans  &trans      &trans  &trans                                                                     &trans
            >;
        };

        NUM {
            bindings = <
&trans          &kp F7  &kp F8  &kp F9  &kp F10                      &kp EQUAL   &mo7          &mo8          &mo9          &kp COLON
&trans          &kp F4  &kp F5  &kp F6  &kp F11  &none       &none   &kp COMMA   &kp NUMBER_4  &kp NUMBER_5  &mo6          &kp MINUS
&kp LEFT_SHIFT  &kp F1  &kp F2  &kp F3  &kp F12  &none       &none   &kp PERIOD  &kp NUMBER_1  &mo2          &kp NUMBER_3  &kp DOUBLE_QUOTES
&trans          &trans  &trans  &trans  &trans   &trans      &trans  &mo0                                                  &kp SLASH
            >;
        };

        ARROW {
            bindings = <
&trans          &kp LC(PG_UP)   &kp UP_ARROW    &kp LC(PG_DN)    &trans                             &trans       &kp LS(LC(TAB))     &kp UP_ARROW    &kp LC(TAB)          &trans
&trans          &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans      &kp PG_UP      &kp HOME     &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp END
&kp LEFT_SHIFT  &trans          &trans          &trans           &trans  &trans      &kp PAGE_DOWN  &kp PAGE_UP  &kp LS(LEFT_ARROW)  &trans          &kp LS(RIGHT_ARROW)  &kp PAGE_DOWN
&trans          &trans          &trans          &trans           &trans  &trans      &trans         &trans                                                                &trans
            >;
        };

        MOUSE {
            bindings = <
&to_layer_0 Q   &kp LC(PG_UP)   &kp UP_ARROW    &kp LC(PG_DN)             &to_layer_0 T                                                             &trans               &kp LC(LS(TAB))    &kp LC(T)  &kp LC(TAB)  &mo 5
&to_layer_0 A   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW           &to_layer_0 G        &to_layer_0 ESCAPE            &to_layer_0 LS(LG(S))  &kp UP_ARROW         &mkp_exit_AML MB1  &mkp MB3   &mkp MB2     &trans
&kp LEFT_SHIFT  &to_layer_0 X   &to_layer_0 C   &to_layer_0 V             &to_layer_0 B        &to_layer_0 TAB               &trans                 &kp DOWN_ARROW       &mkp MB4           &kp LC(W)  &mkp MB5     &trans
&trans          &trans          &trans          &tolayer0lt 6 LANGUAGE_2  &tolayer0lt 2 SPACE  &tolayer0lt 3 LANGUAGE_1      &to_layer_0 BACKSPACE  &tolayer0lt 1 ENTER                                             &trans
            >;
        };

        SCROLL {
            bindings = <
&trans          &kp LC(PG_UP)   &kp UP_ARROW    &kp LC(PG_DN)        &trans                                                &trans          &kp LS(LC(TAB))  &kp LC(T)  &kp LC(TAB)  &trans
&excelkeisen    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW      &trans               &trans                   &trans  &kp UP_ARROW    &mkp MB1         &mkp MB3   &mkp MB2     &trans
&kp LEFT_SHIFT  &kp LC(X)       &kp LC(C)       &kp LC(V)            &trans               &trans                   &trans  &kp DOWN_ARROW  &mkp MB4         &kp LC(W)  &mkp MB5     &trans
&trans          &trans          &trans          &tolayer0lt 6 LANG2  &tolayer0lt 2 SPACE  &tolayer0lt 3 LANG1      &trans  &trans                                                   &trans
            >;
        };

        layer_6 {
            bindings = <
&bootloader  &trans        &trans        &trans        &trans                      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans       &trans        &trans        &trans        &trans  &trans      &trans  &trans        &login1       &login2       &login3       &trans
&trans       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans       &trans        &trans        &trans        &trans  &trans      &trans  &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
