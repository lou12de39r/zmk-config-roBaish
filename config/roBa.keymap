#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "hold-preferred";
    quick-tap-ms = <0>;
    hold-while-undecided;
};

&sl { release-after-ms = <250>; };

&lt { hold-while-undecided; };

/ {
    combos {
        compatible = "zmk,combos";

        BT0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <28 22>;
        };

        BT1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <28 23>;
        };

        BT2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <28 24>;
        };

        BT3 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <28 25>;
        };

        under {
            bindings = <&kp LC(BACKSLASH)>;
            key-positions = <34 21>;
            layers = <0>;
        };

        wintab {
            bindings = <&kp LG(TAB)>;
            key-positions = <18 19>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            layers = <0>;
        };
    };

    macros {
        to_layer_0: to_layer_0mouse {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0MOUSE";
            wait-ms = <0>;
        };

        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl 4>;

            label = "MKP_EXIT_AML";
        };

        parenthesis: parenthesis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ASTERISK &kp LEFT_PARENTHESIS &kp LEFT_ARROW>;
            label = "parenthesis";
        };

        tolayer0num: tolayer0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0>, <&macro_release>, <&lt 2 SPACE>;

            label = "TOLAYER0";
            wait-ms = <0>;
        };

        tolayer0bt: tolayer0bt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0>, <&macro_release>, <&lt 6 LANGUAGE_2>;

            label = "TOLAYER0BT";
            wait-ms = <0>;
        };

        tolayer0arrow: tolayer0arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0>, <&macro_release>, <&lt 3 LANGUAGE_1>;

            label = "TOLAYER0ARROW";
            wait-ms = <0>;
        };

        tolayer0sin: tolayer0sin {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0>, <&macro_release>, <&lt 1 ENTER>;

            label = "TOLAYER0SIN";
            wait-ms = <0>;
        };
    };

    behaviors {
        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        multi_tap_tab_bspc: behavior_multi_tap {
            label = "MT_TAB_BSPC";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp BSPC>;

            max-taps = <2>;
            max-tap-interrupt-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W               &kp E         &kp R             &kp T                                               &kp Y        &kp U  &lt 5 I    &kp O    &lt 5 P
&kp A             &kp S               &kp D         &kp F             &kp G        &kp ESCAPE              &kp LS(LG(S))  &kp H        &kp J  &kp K      &kp L    &kp MINUS
&mt LEFT_SHIFT Z  &kp X               &kp C         &kp V             &kp B        &kp TAB                 &none          &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &mt LEFT_WIN LG(D)  &kp LEFT_ALT  &lt 6 LANG_HANJA  &lt 2 SPACE  &lt 3 LANG_HANGEUL      &kp BACKSPACE  &lt 1 ENTER                             &kp DEL
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        SYMBOLS {
            bindings = <
&none           &kp CARET        &kp DOUBLE_QUOTES  &kp ASTERISK  &kp LEFT_PARENTHESIS                      &kp ASTERISK       &kp LEFT_PARENTHESIS  &trans            &trans         &trans
&kp PLUS        &kp DOLLAR       &kp PERCENT        &kp EQUAL     &trans                &trans      &trans  &kp RIGHT_BRACE    &kp PIPE              &kp SEMICOLON     &kp AMPERSAND  &kp LS(BACKSLASH)
&kp LEFT_BRACE  &kp EXCLAMATION  &kp LEFT_BRACKET   &kp HASH      &trans                &trans      &trans  &kp RIGHT_BRACKET  &kp BACKSLASH         &kp SINGLE_QUOTE  &kp AT         &kp JP_PIPE
&trans          &none            &trans             &trans        &trans                &trans      &trans  &trans                                                                    &trans
            >;
        };

        NUM {
            bindings = <
&none   &kp F7  &kp F8  &kp F9  &kp F10                      &none         &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp COLON
&none   &kp F4  &kp F5  &kp F6  &kp F11  &trans      &none   &kp COMMA     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS
&none   &kp F1  &kp F2  &kp F3  &kp F12  &none       &none   &kp PERIOD    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DOUBLE_QUOTES
&trans  &trans  &trans  &trans  &trans   &trans      &trans  &kp NUMBER_0                                            &kp SLASH
            >;
        };

        ARROW {
            bindings = <
&kp LG(LEFT_ARROW)  &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &kp LG(RIGHT_ARROW)                      &kp LG(LEFT_ARROW)  &kp LS(LC(TAB))  &kp UP_ARROW    &kp LC(TAB)      &kp LG(RIGHT_ARROW)
&kp HOME            &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END              &trans      &trans  &kp HOME            &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END
&kp LEFT_SHIFT      &kp LG(LC(LEFT_ARROW))  &trans          &kp LG(LC(RIGHT_ARROW))  &trans               &trans      &trans  &none               &kp LC(HOME)     &none           &kp LC(END)      &none
&trans              &trans                  &trans          &trans                   &trans               &trans      &trans  &trans                                                                &none
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&none           &to_layer_0 LS(LC(TAB))  &kp UP_ARROW          &to_layer_0 LC(TAB)  &none                                                       &none         &none              &to_layer_0 LC(T)  &none              &mo 5
&none           &kp LEFT_ARROW           &kp DOWN_ARROW        &kp RIGHT_ARROW      &to_layer_0 F2  &to_layer_0 ESC      &to_layer_0 LS(LG(S))  &none         &mkp_exit_AML MB1  &mkp_exit_AML MB3  &mkp_exit_AML MB2  &none
&kp LEFT_SHIFT  &none                    &kp LC(C)             &kp LC(V)            &none           &to_layer_0 TAB      &none                  &none         &mkp MB4           &to_layer_0 LC(W)  &mkp MB5           &kp RIGHT_SHIFT
&kp LCTRL       &kp LEFT_WIN             &to_layer_0 LEFT_ALT  &tolayer0bt          &tolayer0num    &tolayer0arrow       &to_layer_0 BACKSPACE  &tolayer0sin                                                           &to_layer_0 DELETE
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans             &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp_exit_AML MB1  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans             &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                     &trans
            >;
        };

        layer_6 {
            bindings = <
&bootloader  &trans        &trans        &trans        &trans                      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans       &trans        &trans        &trans        &trans  &trans      &trans  &trans        &trans        &trans        &trans        &trans
&trans       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans       &trans        &trans        &trans        &trans  &trans      &trans  &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
